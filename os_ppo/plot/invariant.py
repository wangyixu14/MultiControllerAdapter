import matplotlib.patches as mpatches
import matplotlib.pyplot as plt

red_patch = mpatches.Patch(color='#e377c2', label='$\kappa_{D}: X_{I}$')
blue_patch = mpatches.Patch(color='#1f77b4', label='$\kappa^{*}: X_{I}$')

import numpy as np

#构造等高线函数
def rl1(x,y):
    return -0.357383768019-0.0977143650762*(x/3)-0.0267949152538*(y/3)+0.662983677257*(x/3)**2-0.361192480951*(x/3)**2*(y/3)+0.410252670351*(y/3)**2+0.141324130177*(y/3)**3+0.349205035506*(x/3)**3-0.871585127725*(x/3)*(y/3)**3+0.384718470545*(x/3)**2*(y/3)**3+2.4959091816*(x/3)**3*(y/3)**3+0.439444426395*(x/3)*(y/3)**2-3.90897619843*(x/3)**2*(y/3)**2-1.56816467439*(x/3)**3*(y/3)**2+0.221712997844*(x/3)*(y/3)-0.316901787701*(x/3)**3*(y/3)+0.533815517192*(x/3)**4+1.43864453527*(y/3)**4-0.388073012871*(x/3)**5+1.05577057015*(x/3)**4*(y/3)-0.623034893834*(x/3)*(y/3)**4-0.110474858834*(y/3)**5-0.246895122972*(x/3)**6-0.466767461534*(x/3)**5*(y/3)+7.0796985825*(x/3)**4*(y/3)**2+4.19562725704*(x/3)**2*(y/3)**4+0.693863980004*(x/3)*(y/3)**5-1.0655262006*(y/3)**6+0.135886379069*(x/3)**7-0.689005901172*(x/3)**6*(y/3)+1.09589765935*(x/3)**5*(y/3)**2-0.720675129093*(x/3)**4*(y/3)**3+1.30156887551*(x/3)**3*(y/3)**4-0.135248531981*(x/3)**2*(y/3)**5+0.264868804654*(x/3)*(y/3)**6-0.00463431140825*(y/3)**7-0.16707732275*(x/3)**8+0.59845931213*(x/3)**7*(y/3)-3.03208198348*(x/3)**6*(y/3)**2-1.24626552468*(x/3)**5*(y/3)**3-8.77296493305*(x/3)**4*(y/3)**4-1.88879419528*(x/3)**3*(y/3)**5-0.634824553648*(x/3)**2*(y/3)**6+0.00199333871765*(x/3)*(y/3)**7-0.000108666568477*(y/3)**8

def rl2(x, y):
	return -0.369742404159-0.000838997430166*(x/3)-0.00438138848593*(y/3)+0.522188442955*(x/3)**2+0.106300143925*(x/3)**2*(y/3)+0.841918379519*(y/3)**2+0.0508991369168*(y/3)**4-0.000573296314658*(y/3)**5+0.0124958959286*(x/3)**3+1.05905124419*(x/3)**4-0.0192679654952*(x/3)**5+0.00987720151408*(x/3)*(y/3)**5+0.108301603785*(x/3)**2*(y/3)**5+0.174129595082*(x/3)**3*(y/3)**5+0.86068224582*(x/3)*(y/3)**4+2.45833870268*(x/3)**2*(y/3)**4-1.08656072319*(x/3)**3*(y/3)**4-4.55582987511*(x/3)**4*(y/3)**4+0.00736509110832*(y/3)**3+0.0118344288289*(x/3)*(y/3)**3-0.205414591496*(x/3)**2*(y/3)**3-0.202733609148*(x/3)**3*(y/3)**3+0.242585133253*(x/3)**4*(y/3)**3+0.133853970512*(x/3)**5*(y/3)**3-0.513713930845*(x/3)*(y/3)**2-2.17675097458*(x/3)**2*(y/3)**2+0.374701070531*(x/3)**3*(y/3)**2+0.671291810372*(x/3)**4*(y/3)**2+0.468290872992*(x/3)**5*(y/3)**2-0.00690991326253*(x/3)*(y/3)-0.007024363175*(x/3)**3*(y/3)-0.27321328671*(x/3)**4*(y/3)+0.0821111052803*(x/3)**5*(y/3)-0.804662306549*(x/3)**6+9.38719335782e-05*(y/3)**6+0.00757923839755*(x/3)**7+0.184483312349*(x/3)**6*(y/3)+1.39847426136e-05*(x/3)*(y/3)**6+2.80217479836e-07*(y/3)**7+0.0184798194974*(x/3)**8-0.0576987279432*(x/3)**7*(y/3)+1.44191828477*(x/3)**6*(y/3)**2-0.00110087890332*(x/3)**2*(y/3)**6+7.5782276268e-07*(x/3)*(y/3)**7-8.65009259231e-10*(y/3)**8
#作点
x=np.linspace(-2,2,500)
y=np.linspace(-2,2,500)

#构造网格
X,Y=np.meshgrid(x,y)

#绘制等高线,8表示等高线数量加1
plt.figure(figsize=(6, 4))
plt.contourf(X,Y,rl1(X,Y),[-0.018,-0.01], colors='#1f77b4', linewidth=2)
plt.contourf(X,Y,rl2(X,Y),[-0.023,-0.015],colors='#e377c2', linewidth=2)
# plt.title('Inner-approximation of maximal robust invariant set')
plt.xlabel('$x_{1}$', fontsize=13)
plt.ylabel('$x_{2}$', fontsize=13)
# plt.legend(proxy, ["LQR"])
# # plt.legend()
plt.legend(handles=[blue_patch, red_patch], fontsize=11,loc='lower left')
line1 = np.load('line1.npy')
plt.plot(line1[:, 0], line1[:, 1], linestyle='dashed',color='#7f7f7f')

line2 = np.load('line2.npy')
plt.plot(line2[:, 0], line2[:, 1], linestyle='dashed', color='#7f7f7f')

line3 = np.load('line3.npy')
plt.plot(line3[:, 0], line3[:, 1], linestyle='dashed', color='#7f7f7f')

line4 = np.load('line4.npy')
plt.plot(line4[:, 0], line4[:, 1], linestyle='dashed', color='#7f7f7f')
plt.savefig('OS_Inner.pdf', bbox='tight')